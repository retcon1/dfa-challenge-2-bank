import chalk from "chalk";
import fs from "fs";

export default class Account {
    #id;
    #balance;
    #transactions = [];
    #overdraft = 0;
    #overdraftEnabled = false;

    static #nextAccountId = 1000;

    constructor(balance = 0) {
        this.#balance = balance;
        this.#id = Account.#nextAccountId++;
    }

    getId() {
        return this.#id;
    }

    getBalance() {
        return this.#balance;
    }

    getTransactions() {
        return this.#transactions;
    }

    getOverdraft() {
        return this.#overdraft;
    }

    getOverdraftEnabled() {
        return this.#overdraftEnabled;
    }

    deposit(transaction) {
        // generated by copilot----
        if (transaction.getAmount() <= 0 || isNaN(transaction.getAmount())) {
            throw new Error(`Please enter a number greater than 0`);
        }
        // ------------------------
        this.#balance += transaction.getAmount();
        this.#transactions.push(transaction);
        console.log(`Successfully Deposited £${transaction.getAmount()}`);
    }

    withdraw(transaction) {
        if (transaction.getAmount() <= 0 || isNaN(transaction.getAmount())) {
            throw new Error(`Please enter a number greater than 0`);
        }
        if (transaction.getAmount() > this.#balance + this.#overdraft) {
            throw new Error(`Insufficient funds`);
        }

        this.#balance -= transaction.getAmount();
        this.#transactions.push(transaction);
        console.log(`Successfully Withdrew £${transaction.getAmount()}`);
        console.log(`Remaining Balance: £${this.#balance}`);
    }

    setOverdraft(limit) {
        if (limit === false) {
            if (this.#balance < 0) {
                return console.log(
                    `You are currently in your overdraft, please deposit funds before disabling`
                );
            }

            this.#overdraftEnabled = false;
            this.#overdraft = 0;
            return;
        }

        if (limit <= 0 || typeof limit !== `number`) {
            return console.log(`Please enter a number greater than 0`);
        }

        if (-limit > this.#balance) {
            return console.log(`You cannot set an overdraft limit lower than your current balance`);
        }

        this.#overdraft = limit;
        this.#overdraftEnabled = true;
    }

    printStatement() {
        console.log(`\ndate       || credit  || debit  || balance`);
        let fileData = `date       || credit  || debit  || balance\n`;

        this.#transactions.forEach((transaction) => {
            const consoleCredit = chalk.green(transaction.getAmount().toFixed(2).padEnd(8, " "));
            const consoleDebit = chalk.red(transaction.getAmount().toFixed(2).padEnd(7, " "));
            const consoleBalance =
                transaction.getBalance().toFixed(2) > 0
                    ? transaction.getBalance().toFixed(2)
                    : chalk.red(transaction.getBalance().toFixed(2));

            const consoleTransaction = `${transaction.getDate()} || ${
                transaction.getType() === `credit` ? `${consoleCredit}||  ` : `||`.padStart(10, " ")
            } ${
                transaction.getType() === `debit` ? `${consoleDebit}||` : `||`.padStart(7, " ")
            } ${consoleBalance}`;

            // Avoids using chalk in file output
            const credit = transaction.getAmount().toFixed(2).padEnd(8, " ");
            const debit = transaction.getAmount().toFixed(2).padEnd(7, " ");
            const balance = transaction.getBalance().toFixed(2);

            const fileTransaction = `${transaction.getDate()} || ${
                transaction.getType() === `credit` ? `${credit}||  ` : `||`.padStart(10, " ")
            } ${
                transaction.getType() === `debit` ? `${debit}||` : `||`.padStart(7, " ")
            } ${balance}\n`;

            console.log(consoleTransaction);
            fileData += fileTransaction;
        });

        fs.writeFileSync(`./statement${this.#id}.txt`, fileData, (err) => {
            if (err) {
                console.log(err);
            }
        });
    }
}
